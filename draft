
import a.b.c;
export a.b.c;

// 数据类型
// 整型 int uint int8 uint8 int16 uint16 int32 uint32 int64 uint64 int128 uint128
// 浮点型 float double quater
// 字符 字符串 char string, char和string就是utf-8编码的
// 要不默认提供向量支持 vector avx512
// 

if initializer; condition {

} else if initializer; condition {

} else {

}

// 或者我们也可以不需要switch
// switch 绝对不允许fall throught

// loop
while {

}

while initializer; condition {
	break;
	continue;
}

for initializer in range {

}
 
// 注释
/* */

tuple ()
array []
struct {}
slice

interface Interface1 {

}

class MyClass implement Interface1, Interface2, Interface3 {
	// 这样还稍微好看点
	public static override 
	function fun(var1 type1, var2 type2, ...) return_type {

	}

	// 然后默认的都是private的，就不用写private了
	// 只有作为接口的需要写一个public

	// 所有的filed都必须是private的
	// 然后类会自动生成 get/set 方法以供调用

	[private]
	function private_fun(...) (return_type1, return type2) {

	}

	// 所有的filed都必须是private的
	// 这个类型声明系统还是得仔细设计啊
	// ownership先搞懂了再说吧
	borrow_someone &string;
	something int const&;
}

// 这样她们的语法就是一样的了
// 函数和clouser
function name(paramters) return_type {

}

// lambda, clouser
var clouser = function name() return_type {

}

// 我保留模板唯一的目的其实就是c++ stl 容器和通用算法库
// 没有这些东西 就像go一样，我就是排个序都那么麻烦
template <Constraint T>
class MyTemplateClass implement TempClass<T1, T2, ...> {

	public
	function new() return_type {

	}

	public function delete() return_type {

	}


	// 统统是private的
	static var name type;
	static const name type;
}

// RAII 是一个好文明 这个必须支持
// 关于move和copy我们也需要讨论
// 默认的行为是move，仅当类实现了copy时，我们才会copy
// RAII结合工厂模式
// 每个类都有一个new 同时也有一个delete

// 请问我们能申请分配内存吗？
// 语言内置 memory pool 怎么样
// 这样可以防止内存泄漏，而且我们可以增加很多很多的内存方面的检测，提供性能优化等等
// cool！
// 如果确实用户就是想分配一大块内存，自己在上面胡作非为，我确实想不到比现在的C/C++更灵活的方案
// 但是现在我们就不提供用户申请和释放内存的方法了

// 线程与协程 应该采用go的形式
// 也就是语言内置一个协程池
// 用于创建的是协程 协程池自动管理
// 两套并发编程模型，基于锁的和基于消息的

// defer是一个好文明，
// exception也是一个好文明
// 现在的主流语言都是 try catch throw 没必要自己造新的词 支持就可以了

// ownership 也是一个好文明
// 个人觉得是类似于 unique_ptr 的东西
// 当然rust也提供了shared_ptr 为什么我们不支持提供一个线程安全的shared_ptr
// 然后所有的访问都是加锁的 这样不久非常安全了吗？？
// 性能算个球，好写，安全，才最重要
// 表达力强，语法清晰简单，安全，心智负担小！目标不是系统级语言和性能。

// 元模板编程是否允许？
// 元模板编程就是为了性能啊，编程的心智负担极大，所以还是算了，这种活还是让C++干吧

function main() (var return_type) {
	auto name = 5;

	auto var2 = module1.class.method(...);
}

// C++里面的算法最重要的是什么！是迭代器啊，是各种各样的迭代器
// 这些迭代器太牛逼了，几乎所有的算法所有的容器，就是由这个迭代器实现的
// 我们的模板抽象里面当然要保留这些好的东西

// 还有一个问题是，我们允许操作符重载吗？
// 我们允许函数重载吗？
// 好处：想不到
// 坏处：no！不要保留函数重载和操作符重载，想想数据库里面的那个重载了不知道多少回的函数
// 根本不知道这些函数想干什么，还特别怕调用出错，增加心智负担

// 这是最关键的问题，只要结合的好，模板的问题我们就可以简化的好
// 关键是constraint要怎么实现，和接口要怎么结合
// 第一个问题就是 constraint 要怎么定义
// 像go那样，使用接口定义？
// 还是像C++那样，那么复杂的定义？
// 不管怎么定义，我们的目的是 具有表达能力，我们能够将某个需求或者逻辑表达出来就可以了
// 当然要尽可能表达的清晰易懂

// 我们可以尽可能多的将一些常用的容器变成基本类型
// 比如 string tuple array vector map list 都变成基本类型的话，也简单了

interface any {

}

interface iterator {

}

// 接口定义的是什么？是我们可以做什么！
interface RandomIterator {

}

// 在OO中，我们可以用接口实现动态多态性
// 在模板中，我们实现的静态多态性，静态多态的目的是什么？模板的目的是什么？
// 模板的目的是为了防止我们为每个类型都添加额外的相同的代码
// 同时还要有约束，就是我们期望某个类型有什么功能，因为模板的实现中需要这些功能
// 静态多态和动态多态对 “某种功能”这个要求重合了，所以interface作为constraint是天然合适的
// 同时 constraint 还应该可以组合，我们希望都多个constraint
// 我们有两种类型的constraint type 和 interface
// 我觉得应该用一个新的关键字，constraint
// 其实这就是go的constraint，我觉得设计还是不错的
// 只不过应该用一个全新的关键字
// 因为interface本身是设计给OO的，强行让他和模板混在一起不好
// C++还有一种约束是 语义 约束，比如 copyable, moveable, ...
// 这些也可以作为关键字加入，因为编程语言的使用者不允许自己定义新的语义，所以这些都是可控的

constraint integer {
	ints
}
// 不过constraint的语法到底应该如何设计，还是可以考虑一下的
constraint container {
	type [int, uint, int64]
	interface new_constraint {
		function fun() return_type;
	}
	semantic {
		// 但是什么是语义呢？语义不就是接口吗！！
		// 那这个东西就是不需要的，go也没有定义这个玩意
	}
}

interface SequenceIterator {
	function next();
	function deref();
}

// 比方说，我想要定义一个顺序容器
constraint SequenceContainer {
	function begin() SequenceIterator;
	function end() SequenceIterator;
	
	// 后置类型
	fn begin() SequenceIterator;
	// 前置类型
	SequenceIterator begin();
}

// 或许 function 关键字应该用 fn, 不然实在是打太多字了

// 保留typedef
typedef new_type old_type;

typedef my_struct struct {

};

// 如果我们内部的函数还对类型有要求，那是内部的事情
// 我们这里就应该只写出我们的要求，要求可以一级一级的检查
// 这样写起来简单，不用在最开始的地方就提出所有的约束
// 模板的约束也后置，我们可以直接使用某个类型，当作模板类型，也可以使用约束当作类型
template <container SequenceContainer, Fn fn ()>
fn for_each(c container, fn Fn) {

	// 后置
	// go认为后置比前置好
	var i = 0;	// 为了安全，可以强制初始化
	var ii = 8;
	const cd = 16.0;

	// 前置
	int i;
	int ii = 8;
	const int ci = 16;

	// 哪怕是在C++里面，有了auto之后我也是这么写的
	// 这本身就是一种后置类型说明
	auto new = Type{};

	// 但是为什么在定义变量的时候，后置类型就显得这么奇怪呢？？？
	// 后置类型的话，词法解析器写起来也简单，所有的句子 我们只看第一个单词就知道是什么

	// rust的默认常量设计的非常非常好，
	// 其实这个设计也是为了ownership设计的，好文明，应该保留


	for e in c {
		fn();
	}
}

// todo：设计出模板之后，最好的方法就是用我们的语法 把stl容器和算法实现一遍
// 看看能不能做出同样的表达

关于OO部分 参考 java C# C++ 就可以，这些语言的OO设计的非常好
C++的OO灵活性太高，java和C#其实都是在C++之上做减法，做的也都相当不错，
我大概看了一下，java和C#的OO部分基本的思想差不太多
我的语言大概也想设计成java和C#那样，还是基于C++做减法

但是java和C#都选择了无法创建global的变量和函数，也就是global的元素全都是类
这一点我不太喜欢，这减少了很多表达力，减少了表达的方式
可能在实际工程上限制表达的方式其实是一种好事

class
interface
我很奇怪，C++里面是没有abstract的，因为抽象基类的作用就是定义接口, 是用 virtual function = 0; 来实现的 这个语法其实也不太好
但是java和C#里面已经有interface接口这个关键字了，为什么还要再有一个abstract关键字??

大概就是interface和class就可以了
然后就是另外一个问题了，关于 access 部分，在语法上，C++是一类
class CppClass {
public:
	xxx
private:
	xxx
protected:
	xxx
};
Java/C# 是一类
class JavaCSharpClass {
	public void Main() {}
	private int var;
}

// 哪种更好呢？
第一种的好处是打的字可以少一点，但是当一个类的代码较多时，你就很难直到某个成员变量或者成员函数的access, 感觉这并不是一个特别大的缺点，反而是 public: 这种语法不是很好看
区分一个域 或者说 scope 其实就是 {} 这是非常符合直觉的
第二种的好处是你可以明确的直到某个成员的access，但是写起来非常麻烦，打字非常多，放眼望去全是关键字，看不到重点的数据类型

我们没有头文件和源文件了呀，如果一类特别长，这种现象在C++里面不常见，但是在模块化的语言里面，这种现象就非常常见了
你还是用类似域的这种声明方式，就会导致你不知道这个函数的access等等的属性是什么
所以java和C#采用这种语法是合理的

我们可以将这两点结合起来，这样还可以强制的组织接口防止的位置，比如公共接口部分 都放在 public {} 里面 这样看代码也清晰
// 这种设计还挺不错的
// 还有就是继承类和实现接口的关键字应该叫什么
// 在java里面是将两个关键字区分开了 继承叫做 extends 实现接口叫做 implement
// 在C# C++里面是是用 : 代替了这两个功能
// 只用一个关键字当然是好的，关键字越少，心智成本越低
class MyClass impl Interface1 {
	public override {
		fn fun() return_type {

		}

		fn fun2() return {

		}
	}


	public static {
		fn 
	}

	public virtual {

	}

public virtual fn 

// virtual是有实现的动态函数
private virtual {

}

	// abstract是没有实现的动态函数
	// 只要定义了一个这个玩意，那你为什么不直接定义接口？
	public abstract {
		
	}

protected {

}

private {
	int i;
	var i int;


}
}

fn 

var

const 

import 

public class

private class

abstract class == interface ??

// 默认属性是private！ 这样就可以解决写太多关键字的毛病

class DefaultPrivateClass {

}

fn DefaultFunction() (return_type) {

}

public fn ExplicitPublicFunction() (return_type) {

}

// 这种域的语法设计其实还挺好的，其实可以保留啊
public {

}

// 默认就是 private
var {
	name1 type
	name2 type
	name3 type
	name4 = 123
}

const {
	cname1 = c1value
	cname2 = 123
}

// 这种数据类型就完全是一个简单的数据类型集合，没有任何的OO特性
struct MyStruct {

}

array []
tuple ()
range [begin:end] 
filter |

if () {

} else if () {

} else {

}

if condition {

} else if condition {

} else {

}

// 但是如果不带括号，就会显得些许凌乱，对吧，一眼分不清关键字和循环体语句，判断条件等
// 所以还是带括号吧
// 为什么我们很多句子都带着标点符号呢，为什么会有标点符号的出现，不就是为了切断句子，可以更仔细的看清每个结构吗？
// if (initializer; condition) {

}
// 所有的标点符号的出现，都是为了切断句子，关键字是关键字，初始化是初始化，条件是条件
// 所以括号是好的，应该保留的，他增加了可读性，减少阅读负担
for int i = 0; i < 100; i++ {

}

for (int i = 0; i < 100; i++) {

}

if (initializer; condition) {

} else if (condition) {

} else {

}

for {

}

// 这里为什么不用in? 因为前后都是文字，我们这里从语法上，还是从阅读理解上
// 都需要将两个部分分开，前面是循环体要用的多个变量，后面是一个range或者container iterator等等
// 中间需要一个东西将她们隔开，如果还是用英文字母 in 一眼看过去 起不到隔开句子的作用
for (var var1, var2 : range1) {

}

// 但是如果支持filter操作，这样写的话，感觉就又不对了，冒号就没有将两者分开
for (var var1, var2 : range1 | range2 | range3 | ...) {

}
// 这样的写法很难让人一眼就将变量声明部分和range部分分开，但是写成下面这样，就很容易让人分开
for (var var1, var2 : range1 , range2 , range3 , ...) {

}
// 标点符号的大小，高度，位置等等，也会影响人从视觉上对句子成分的阅读
// 但是filter这个操作使用 | 这个符号是非常非常符合直觉的，因为unix传下来的，用C++的又大部分都是后端，每天用linux shell
// 所以 | 真的再合适不过了

// 流怎么样, 也不怎么样
for (var var1, var2 << range1 | range2 | range3) {

}

// 比如说我想要1-100以内的质数
// 其中prime是一个函数，其实C++里面已经支持这种操作了，C++20的range，我觉得非常nice
// slice 使用 [1..3] 这个操作符其实挺符合直觉的，这个操作符就是省略了中间的部分东西的意思 比 [1:3] 好多了
for (var number : 1..101 | prime) {
	printfln(number);
}

// [) 像这样的操作是不行滴 你无法遍历所有的整数
// 但是我怎么像C++里面的lambda那样去捕获变量呢??
// ! 我可以表示所有的整数啊，就是不写后面的不就行了吗 1.. 就这样写吗
// 如果像变量所有的整数 ..
// Int就是模板约束类型 这样会使得函数成为模板函数
for (var number : .. | fn (Int n) { return n % 2 == 0 }) {

}

// 如果我想将输入序列排序再用怎么办呢
// 这要怎么实现呢？？？
// 到时候可以参考C++20 range 
for (var number : container | sort) {

}

// 这样的话 . .. ... 都用了 哈哈

// 这里用什么关键字其实并没有什么所谓，唯一的作用就是将前面类的声明和后面的基类，接口等区分开来
// 而 : 可以很好的做到这一点，无疑是极好的选择，而且还少了一个关键字，perfect！
public class MyClass : BaseClass1, Interface1 {
	
	// C#的这个get set语法深得我心 非常的好
	int i {get; set};

	// 属性 attribute 往往使用 [] 方括号来写
	// 这表示编译器帮你做了一些事情
	public static var {
		[get, set]i int = {initializer};
	}

	var {
		[get, set]i int = {0};
		[get, set]a double = {0.0};
	}

	var i int
	var d double

	// 如果我希望所有的变量都自动生成get，set方法，那就在前面加上这个attribute
	// 这样不就方便死了
	private var {
		[get, set]i = 0;
		[get, set]d = 0.0;
		[get, set]i = 0;
		[get, set]d = 0.0;
		[get, set]i = 0;
		[get, set]d = 0.0;
		[get, set]i = 0;
		[get, set]d = 0.0;
	}

	// 但是这个attribute的设计必须要精妙， 如果只有这一个地方用到了get set
	// 那还不如不用呢
	// 还是说，这个会变成一个默认行为？？只要是private的变量，就会生成get set方法
	// 不太好啊，我声明成private就是不想外部使用啊，对吧，你再给我默认生成 get set 这不找抽
	private var[get, set] {
		i = 0;
		i = 0;
		i = 0;
		i = 0;
		i = 0;
		i = 0;
		i = 0;
		i = 0;
		i = 0;
	}

	// 这个语法还是不好弄，如果我只有一个变量，我也想自动生成get 我该怎么写呢
	// 类似这样？？
	private var[get] i = 0;

	private var[get, set] pi *int = nullptr;

	// 或者这样, 貌似python是这样的语法，丑啊
	@get
	private var i = 0;

	const {

	}
}

// attribute 也可以用在类似这种地方，emm
// 不过总觉得 attribute 这个设计不好
// 这个玩意唯一的目的就是提供一个语法糖，可以自动生成 get/set方法 
// 但是我们为了这一个语法糖引入了一个新的概念 attribute，这极大的增加了心智负担，应该有更好的方法
fn[inline] fun(i int, d double) (b bool) {

}

// hello, world
fn main(argv []string) () {
	println("hello, world.");
}

// 后置类型还是有优势的，编译器实现简单，可读性好，就是有点丑
// 复杂类型可读性好，这一点C确实是。。。

// 所以后置类型这一点是敲定的，剩下的问题就是怎么让语法更加好看一点
// 基本数据类型
int int8 int16 int32 int64 int128
uint uint8 uint16 uint32 uint64 uint128
float double
bool
vec smid

// 数组呢
int[8]

// 数组的指针呢

// 数组的引用呢？

// 常量引用？？

// C-like
(string*)[]
// Go-like
[]*string

// 这是声明，如果我们要使用数组呢??
argv[0], argv[1]


// 这样函数就没有指针了
// 我应该支持可变长数组 就像C那样，这样可以在栈上分配数组
[n]*string
[n]&string
// 其实这种形式不仅实现简单，可读性也更好

// 比方说我想声明一个数组，元素类型是函数指针，函数的参数是int，返回类型是函数指针，函数的参数类型是int
// Go-like
[n]*fn (Int) *fn (int)
// C like
// 不好意思，C的我写不出来。。。
(()*)[n]
// 由此可以见的，这毕竟是C语言的创始者改进的声明系统，还是非常值得借鉴的
// https://go.dev/blog/declaration-syntax
// 这个是非常值得借鉴的

// 不管指针还是引用，我们都是用 . 操作符
// 但是指针表示 mutable 而引用表示 const
// 这样就不用引入额外的关键字了
// 这就是一个模板声明
template <T Int>
fn sort(c Container<T>, less fn(T)bool) {
	
}

template <T Int>
fn sort(Container<T> c, fn(T)bool less) {

}

// 当某个函数需要返回多个值的时候
fn main(argc int, argv []string) int {
	var result, err = some_fn(); 
	if (err != null) {
		return 1;
	}
}

// 其实接下来才是最关键的地方：涉及到rust的ownership啊，左值，右值，指针，引用，等等，C++对这些东西的规则极其复杂
// 我的语言中应该对这些规则做一些约束，做一些简化
// 不考虑系统级编程，所以指针操作就全部去掉了
// 应用程序编程，然后不带GC，但是希望带上ownership
// 不允许new delete内存

fn main() {

	var
	const

	&const = &
	&var

	// 构造是特殊的，我们在堆上生成的内存，实际上返回的是一个unique_ptr
	var str = string{"hello, world"};
	// 默认的赋值操作是move
	// 只有显示定义了copy操作的对象才是copy

	// 这样的话，我们可以做borrow & 也就是常量引用
	// 我们也可以做变量引用 &
	// 或者我们可以占用 occupy 也就是move
	// move结束之后，原来的指针就失效了
	// 再使用就不礼貌了

	// 默认常量引用，这个非常nice
	// 但是这个操作在其他语言里面是解引用啊，这会引起歧义的
	// 这种语法并不好
	const cr_str = &str;
	var r_str = &str;

	// 这样的话 我们就没有解引用这个操作了

	// 其实就只有四个语义 
	// move
	// copy
	// const reference
	// mutable reference

	// move和copy要和类的 构造 析构 copy move 函数来定义, 这些东西本来就是C++的那套东西, RAII 好文明，保留！
	// 但是在写法上都是赋值操作符 =
	// 默认的动作是move
	// 只有定义了copy 才能逃过ownership的约束，不过性能就会差一些

	// 然后就是 剩下的两个东西的语法了
	// rust的语法是真的丑
	// const reference: &type, 这个其实还好
	// 但是 mutable reference: &mut type, 这个就丑死了

	// 如果我们禁止解引用的话，不就可以了吗
	// *type 这个操作就不是解引用了，而是获得 mutable reference
	// &type const reference

	// 不管是那种reference， 我们都可以直接使用，也就是都是使用 . 来操作
	// 程序无法直接得到某个变量的指针

	var str = string{"hello, world"};

	// 但是在调用这些函数的时候，我们不需要显示的写出我们的引用方式
	mutable_reference(str);
	const_reference(str);
	move_string(str);
	// 但是这样可读性高吗？不高。
	// 三个函数对string的处理完全不同，但是从这里我们却完全看不出来
	// 像下面这样，三种不同的调用方式，清晰的分别开来
	mutable_reference(*str);
	const_reference(&str);
	move_string(str);

	// 用符号其实还是不如文字清晰啊
	// 如果记错了呢？
	// 用两个符号代替两个意思
	// 不对啊，没有人会用这门语言，所以怎么简洁优美怎么来呗
}

fn mutable_reference(ref *string) {
	// 然后我们就可以做一些修改的操作
	ref.x = "something else";
}

fn const_reference(ref &string) {
	// 修改内容是不行的
	ref.x = "asljdfasd"
	// 读取内容是可以的
	var x = ref.x
}

fn move_string(m string) {

}

// 好！现在其实就已经定义的差不多了
// 模板要怎么实现呢
// 比如说，我想在像实现一个模板链表和迭代器
// 我们现在先不用考虑模板
// 我们就用现在的约束实现一个链表

// iterator

template <T Any>
clss ListNode {
	T data;
	ListNode prev;
	ListNode next;
}

template <T Any>
class ListIterator : BiIterator {
	public override fn deref() &T {
		return &node.data;
	}

	public override next() ListIterator {
		node = node.next;
		return this;
	}

	public override prev() ListIterator {
		node = node.prev;
		return this;
	}

	var node ListNode;
}

template <T Any>
public class List {

	iterator begin();
	iterator end();

	List() {
		node = ListNode{
			data = null;
			prev = *node;
			next = *next;
		}
	}

	private fn insert_between(prev, next Iterator, data T) {
		var node = ListNode{
			data: data,
			prev: null,
			next: null,
		}

		// 我们在写这样的句子的时候
		// 实际上发生了什么??
		prev.node.next = node;
	}

	public fn insert_after(it Iterator, data T) (&List) {
		// create a new node
		var node = ListNode{
			data: data,
			prev: null,
			next: null,
		}

		// 这里其实都应该是指针啊
		// 但是我们要怎么区分呢？？
		// 难道是语言内部的实现实际上使用了指针
		node.next = it.node.next;
		it.node.next.prev = node;
		it.node.next = node;
		node.prev = it.node;
	}

	ListNode node;
}

var node = new(ListNode{});

var node = new ListNode{};

// 这个关键字其实不错呀
// 我们也可以有 stack heap 什么都没有 三种变量的声明方式
// stack会强制让所有的内存，包括类内部定义的所有内存，全部声明在栈上，因为有的时候程序员自己知道
// 所有的数据都不会拿到外面，这样就可以加快速度
// 使用heap，就是希望我们的数据可以生成在heap上面，类似其他语言的new操作符
// 而什么都不加，就是通常的形式，变量本身在栈上，内部构造函数定义了heap操作，就会在堆上
var plist = [stack] List{5, 6, 7, 8, 9};
var plist = heap List{5, 6, 7, 8, 9};

var plist = List{5, 6, 7, 8, 9};
var plist = stack List{5, 6, 7, 8, 9}; // 如果分配在栈上，要求所需的内存在编译时已知，否则编译报错
var plist = heap List{5, 6, 7, 8, 9};

// 这样写也是可以的，但是这是没有必要的，因为本来像1这样的数字就会分配在栈上, 甚至是寄存器里
var i = register 1;
// 我可以像C++那样区分普通的POD对象和类对象，只有对类对象才会有stack heap分配在哪里的考虑
// 像int这样的默认就是在栈上，除非
var pi = heap int;
var pi = heap 0;

// 丑死了
var[heap] pi = 0;

heap var pi = 0;
stack var pi = 0;
local var pi = 0;
static var pi = 0;

var pi = 0;

// 显然这种语法是最好的
// 这个时候pi是一种内置类型 叫做 shared_ptr
new pi = List{5, 6, 7, 8, 9};
var shared_pi = pi;

static pi
local pi
new pi
var pi
stack pi
const pi

// 默认都是常量, 这就是一个全局的常量
[static] const pi = 3.14;

// 然后我们同样是无需解引用的，因为没有指针这个概念，我们就是变量，只不过放在不同的地方

var plist = new(List{5, 6, 7, 8, 9});

// 那我们现在有new了，应该可以实现链表了吧
// 还是不行啊，我们无法区分普通的类型和智能指针类型
// 所以智能指针还是需要一个类型的, 否则我们是无法声明的
// 那么就让所有的指针类型 都是智能指针类型就可以了

// 漂亮啊
fn insert_between(prev *ListNode, next *ListNode, node *ListNode) {
	prev.next = node;
	next.prev = node;
	node.prev = prev;
	node.next = next;
}

// 不过全是智能指针会导致一个问题，循环引用而导致的内存泄漏
// 我们怎么解决这个问题？

// 现在只剩下一个问题了，现在& 和 * 各有用途。所以之前的设计被推翻了
// 而且传入参数的时候，我们确实想要指定 const 或者 mutable
// const pointer
// mutable pointer
// const reference
// mutable reference
// 这四种模式我们都想要指定
// 该采用怎样的语法呢?? 其实还是后置语法啊

const int* a;

[const] prev *ListNode;
mut prev &ListNode;

// 其实除了这么写 也没有更好额写法了
fn insert_between(prev *const ListNode, next *const ListNode, node *const ListNode) {

}

// pointer of const ListNode 

const prev *const ListNode;
第一个const表示栈上的prev变量是否可以修改，这个const是没有任何意义的
// 第二个const表示 pointer of const ListNode, 这是符合从左到右的阅读顺序的，而且我们不能
// 修改ListNode的值，这个指针也是有意义的
// 所以rust这样的声明方法也是有意义的

class MyClass {
	var {
		next *mut ListNode;
		prev *mut ListNode;
	}
}

// 也可以倒过来，默认是可变的，需要const的时候再加上 const_reference 这样可以少一个关键字
struct ListNode {
	next *ListNode;
	prev *ListNode;
}
// 这样写起来就特别亲切了

// 模板的设计需要首先详尽的学习C++的模板和STL range等等的实现才行
// 还是先把rust学完
// 然后参考STL和range的实现设计我的模板

// 这也可以是一个函数，他会自动捕获x， 然后声明函数 
// fn annonymous_function (x typeof(x)) { return x % 2 == 0; }
fn { return x % 2 == 0; }

// 协程支持 看看C# 听别人说解决的不错... 和C++的解决方案一样，是 stackless coroutine

// nullable ?? 就是C++里面的Optional
optional<int> oint;
// 这个东西可以是null，或者是零，
// 在我们需要任何值都是有效的值的时候就有用了，这个是否我们往往需要一个 flag 来表示值是否有效
// 这个也算是语法糖吧

// 值类型还是算了，就是copy on write那一套吗，这不纯纯的增加心智负担吗！

// 添加最常用的容器作为基础类型
array[]
// map的语法应该学习json
struct{
	key1: value,
	key1: value2,
}

var students = map {
	"10001": "zhangzhong",
	"10002": "hello, world",
};

for (var no, name : students) {
	println(no)
	println(name)
}

for (var no : students) {

}

// 那这样的话，我岂不是可以for each一个结构体？
// 没有意义，用for遍历结构体和tuple没有意义
// 反而增加实现难度
for (var name, field : struct) {

}

var int_array = [1, 2, 3, 4, 5];

var str = "hello, world"

var str = string{"hello, world"};

哦哦哦 还有tuple (1, "hello", 2.0);
用来简单的装一些超过两个数据的结构，又不用临时定义一个结构体
但是在实现上应该就是转换成结构体实现吧，还是就是单纯的帮忙多定义几个变量呢
var my_tuple = (1, "hello", 2.0)
for (e : my_tuple) {
	println(e)
}

// 我们是不是可以取消分号？如果语法设计的足够好，分号是可以去掉的！！！

// 类似json的结构实际上是帮你定义了一个结构体，这样的话结构体我们也可以通过名字来访问
// 直接定义这种结构的语言从来没有遇到过，都是靠反射来支持json
; var students = json {
; 	"100": 100010,
; 	1: bool,
; }

// 字面值设计
// 除了常见的数值和字符以外，还应该增加时间
1s 代表1s 1m 1h 1d 1m 1y
// 对吧，这样表示时间是不是牛逼多了
1ms 1us 1ns
// 也就到这里了，计算机不能再支持更多了
// 为了支持长数字读起来更加具有可读性
// 在数字声明里面可以增加间断符 '
// var i = 123'456
// emm 这个可选吧

// 可以保留调用C代码的方式，这样不久可以用他的线程库了吗
// 不然我怎么实现线程支持啊

// 不管怎么样，我可以设计啊，先设计出来，现在就想着怎么实现了，设计的时候就畏手畏脚
// 怎么能把语言设计的优雅呢？

// 操作符重载应该保留啊，不然矩阵。向量这些玩意的加法 你怎么做吗 对吧
// 还有一个是自定义后缀 我们可以给一个字面值加上一个后缀 让这个值变成我们定义的一个类型
// 就比如对时间的支持 这个东西也是C++支持的东西 到时候可以参考
// 比如时间 1h 60s
// 再加上对操作符的重载，就可以实现 now - begin_time <= 60s 这样的写法，表达力逆天


// 协程也是采用stackless的方式来实现
// 线程要怎么实现捏，线程底层的实现当然还是调用系统的接口
// 语言只不过是包装一下，所以大胆的设计 肯定能实现
// goroutine 就是协程池吗

typedef atomic_int atomic<int>

var ai = *atomic<int>;



// 让一个函数变成coroutine
co fn () {
	await

	yield

	return
}

// 那么肯定有一个线程的库
import concurrency

var m concurrency.Mutex
var i = 0

fn main() {
	co fn() {

	}

	while (true) {
		// 我们当然得有锁，只不过这个锁是协程锁 而不是线程锁
		// 总感觉没有分号怪怪的
		// 总之就是提供标准的线程编程模型，但是内部实际上使用的是协程池
		// 接口更加简单，性能更加爆炸

		// 写法一
		m.lock()
		defer m.unlock()

		// 写法二, 匿名变量，我们只想利用RAII特性 没必要给一个名字
		var = co.lock_guard<co.Mutex>{m}

		// 基于消息的并发编程模型也让并发变得更加简单
		channel select

		select {
			<-ch
		}

		// 现在问题就来了，你觉得go的channel语法怎么样
		var ch chan [10]int;

		// 还是第一种打字快一些
		ch << 1
		ch <- 1

		ch << 1
		var i = <<ch

		// 然后我们有一个关键字是用来实现select的 也是类似Linux里面的epoll 也就是 io multiplex
		// 这个到时候看一下论文原文吧，从里面找一些字眼就可以了
		try {
			for select {
				<<timer: ;

				ch << 1: ;

				default: sleep(1s);
			}
		} catch () {

		} finally {

		}

		// 究极语法糖啊
		// 不断执行某个函数
		for {
			func();
		}
		for func();
		co func();

		// 我认为switch的语法需要改进
		// 但是还没想到怎么改进
		switch (var) {
			case 1:

			case 2:

			default:
		}

		// 我还要考虑这些东西怎么和异常相结合


		i += 1
		println(i)
		co.sleep(1s)
		co.yield()
		return
	}

	// 回调
	async_op(fn callback() {})
	// do my work ...


	// 现在有了coroutine, 我可以怎么做？
	co async_op() {
		// do some slow work
		callback()
	}

	// 这不就解决了那个回调的问题吗？？


	co func();
}

fn main() {
	// 所以这应该算编译错误吧，哈哈哈 不然卡死了呀
	co main()


	for fn {
		do some work
	}()

	for {
		fn {}()
	}

	for fn {}();
}


// 我现在可以统计一下我们有多少个关键字了
var const struct
public private protected class interface override virtual final abstract 
if else for break continue default switch 或者default都复用final
fn return defer
co chan select default yield
module import
try catch throw default
template constraint
typedef sizeof typeof

types
int int8 int16 int32 int64 int128
uint uint8 uint16 uint32 uint64 uint128
float32 float64 float128 float256 float512 // int uint bool float double map
vec512 
bool true false string map tuple array

为了互操作 我决定支持一个特殊的调用C语言代码的方式 不过具体怎么实现还得考虑